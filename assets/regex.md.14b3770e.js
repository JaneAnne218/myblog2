import{_ as s,o as l,c as a,V as n}from"./chunks/framework.7d8927c2.js";const h=JSON.parse('{"title":"regex","description":"正则表达式","frontmatter":{"title":"regex","description":"正则表达式","date":"2023-07-28T00:00:00.000Z","tags":["regex"]},"headers":[],"relativePath":"regex.md","filePath":"regex.md","lastUpdated":1691739366000}'),o={name:"regex.md"},p=n(`<blockquote><p>测试正则表达式是否匹配：<a href="https://regex101.com/" target="_blank" rel="noreferrer">regex101.com</a></p></blockquote><h2 id="正则表达式的概念" tabindex="-1">正则表达式的概念 <a class="header-anchor" href="#正则表达式的概念" aria-label="Permalink to &quot;正则表达式的概念&quot;">​</a></h2><p>正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。 举例：</p><ul><li>\\d可以匹配一个数字</li><li>\\w可以匹配一个字母或数字</li><li>.可以匹配任意字符</li><li>\\s可以匹配一个空格（也包括Tab等空白符）<br> 所以，\\d\\s\\w.可以匹配&#39;1 2a.&#39;</li></ul><h2 id="常用的正则表达式" tabindex="-1">常用的正则表达式 <a class="header-anchor" href="#常用的正则表达式" aria-label="Permalink to &quot;常用的正则表达式&quot;">​</a></h2><ul><li>\\d可以匹配一个数字</li><li>\\w可以匹配一个字母或数字</li><li>.可以匹配任意字符</li><li>\\s可以匹配一个空格（也包括Tab等空白符）</li><li>*表示任意个字符（包括0个）</li><li>+表示至少一个字符</li><li>?表示0个或1个字符</li><li>{n}表示n个字符</li><li>{n,m}表示n-m个字符</li><li>\\s可以匹配一个空格（也包括Tab等空白符）</li><li>^表示行的开头</li><li>$表示行的结束</li></ul><h2 id="正则表达式要注意win和linux的换行符的不同" tabindex="-1">正则表达式要注意win和linux的换行符的不同 <a class="header-anchor" href="#正则表达式要注意win和linux的换行符的不同" aria-label="Permalink to &quot;正则表达式要注意win和linux的换行符的不同&quot;">​</a></h2><ul><li>win的换行符是\\r\\n</li><li>linux的换行符是\\n</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 用于匹配win的换行符</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> reg </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">\\r\\n</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">g</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 用于匹配linux的换行符</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> reg </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">\\n</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">g</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//实例</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 匹配包含在 --- --- 之间的内容 linux下的</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> frontMatterRegex </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">---\\n</span><span style="color:#89DDFF;">([</span><span style="color:#C3E88D;">\\s\\S</span><span style="color:#89DDFF;">]*?)</span><span style="color:#C3E88D;">\\n---</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">m</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//win下的</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> frontMatterRegex </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">---\\r\\n</span><span style="color:#89DDFF;">([</span><span style="color:#C3E88D;">\\s\\S</span><span style="color:#89DDFF;">]*?)</span><span style="color:#C3E88D;">\\r\\n---</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">m</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="n-s-s-n-m" tabindex="-1">/---\\n([\\s\\S]*?)\\n---/m <a class="header-anchor" href="#n-s-s-n-m" aria-label="Permalink to &quot;/---\\n([\\s\\S]*?)\\n---/m&quot;">​</a></h2><ul><li>---\\n 匹配 ---\\n</li><li>([\\s\\S]*?) 匹配任意字符</li><li>\\n 匹配 \\n</li><li>--- 匹配 ---</li><li>/m 表示多行匹配</li></ul><h2 id="s-s" tabindex="-1">- ([\\s\\S]*?) <a class="header-anchor" href="#s-s" aria-label="Permalink to &quot;- ([\\s\\S]*?)&quot;">​</a></h2><ul><li>() 表示分组</li><li>[\\s\\S] 表示任意字符</li><li>*? 表示非贪婪匹配</li></ul><h2 id="正则表达式的分组" tabindex="-1">正则表达式的分组 <a class="header-anchor" href="#正则表达式的分组" aria-label="Permalink to &quot;正则表达式的分组&quot;">​</a></h2><ul><li>() 表示分组</li><li>[] 表示范围</li></ul><h2 id="正则表达式的非贪婪匹配" tabindex="-1">正则表达式的非贪婪匹配 <a class="header-anchor" href="#正则表达式的非贪婪匹配" aria-label="Permalink to &quot;正则表达式的非贪婪匹配&quot;">​</a></h2><ul><li>*? 表示非贪婪匹配</li></ul><h2 id="正则表达式的多行匹配" tabindex="-1">正则表达式的多行匹配 <a class="header-anchor" href="#正则表达式的多行匹配" aria-label="Permalink to &quot;正则表达式的多行匹配&quot;">​</a></h2><ul><li>/m 表示多行匹配</li></ul><h2 id="date-s-m" tabindex="-1">/^date:\\s*(.*)/m <a class="header-anchor" href="#date-s-m" aria-label="Permalink to &quot;/^date:\\s*(.*)/m&quot;">​</a></h2><ul><li>^ 表示行的开头</li><li>date: 表示date:</li><li>\\s* 表示任意个空格</li><li>(.*) 表示任意字符</li><li>/m 表示多行匹配</li></ul><h2 id="正则表达式修饰符" tabindex="-1">正则表达式修饰符 <a class="header-anchor" href="#正则表达式修饰符" aria-label="Permalink to &quot;正则表达式修饰符&quot;">​</a></h2><ul><li>i 修饰符用于执行对大小写不敏感的匹配。</li><li>g 修饰符用于执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</li><li>m 修饰符用于执行多行匹配。</li></ul><h2 id="正则表达式的元字符" tabindex="-1">正则表达式的元字符 <a class="header-anchor" href="#正则表达式的元字符" aria-label="Permalink to &quot;正则表达式的元字符&quot;">​</a></h2><ul><li>\\d 任意数字</li><li>\\D 任意非数字</li><li>\\w 任意字母数字下划线</li><li>\\W 任意非字母数字下划线</li><li>\\s 任意空白符</li><li>\\S 任意非空白符</li><li>\\b 匹配单词边界</li><li>\\B 匹配非单词边界</li><li>\\n 匹配换行符</li><li>\\r 匹配回车符</li><li>\\t 匹配制表符</li><li>\\v 匹配垂直制表符</li><li>\\f 匹配换页符</li><li>\\0 匹配空字符</li><li>\\xhh 匹配十六进制数</li><li>\\uhhhh 匹配 Unicode 字符</li></ul><h2 id="正则表达式的量词" tabindex="-1">正则表达式的量词 <a class="header-anchor" href="#正则表达式的量词" aria-label="Permalink to &quot;正则表达式的量词&quot;">​</a></h2><ul><li><ul><li>重复零次或更多次</li></ul></li><li><ul><li>重复一次或更多次</li></ul></li><li>? 重复零次或一次</li><li>{n} 重复n次</li><li>{n,} 重复n次或更多次</li><li>{n,m} 重复n到m次</li></ul><h2 id="正则表达式的贪婪模式和非贪婪模式" tabindex="-1">正则表达式的贪婪模式和非贪婪模式 <a class="header-anchor" href="#正则表达式的贪婪模式和非贪婪模式" aria-label="Permalink to &quot;正则表达式的贪婪模式和非贪婪模式&quot;">​</a></h2><ul><li>贪婪模式：正则表达式默认是贪婪模式，即匹配尽可能多的字符</li><li>非贪婪模式：正则表达式默认是贪婪模式，即匹配尽可能多的字符</li></ul><h2 id="正则表达式的分组-1" tabindex="-1">正则表达式的分组 <a class="header-anchor" href="#正则表达式的分组-1" aria-label="Permalink to &quot;正则表达式的分组&quot;">​</a></h2><ul><li>() 表示分组</li><li>[] 表示范围</li></ul><h2 id="正则表达式的分支条件" tabindex="-1">正则表达式的分支条件 <a class="header-anchor" href="#正则表达式的分支条件" aria-label="Permalink to &quot;正则表达式的分支条件&quot;">​</a></h2><ul><li>| 表示分支条件</li></ul><h2 id="正则表达式的反义" tabindex="-1">正则表达式的反义 <a class="header-anchor" href="#正则表达式的反义" aria-label="Permalink to &quot;正则表达式的反义&quot;">​</a></h2><ul><li>\\W 匹配任意非字母数字下划线</li><li>\\S 匹配任意非空白符</li><li>\\D 匹配任意非数字</li><li>\\B 匹配非单词边界</li><li>[^x] 匹配除了x以外的任意字符</li></ul><h2 id="正则表达式的零宽断言" tabindex="-1">正则表达式的零宽断言 <a class="header-anchor" href="#正则表达式的零宽断言" aria-label="Permalink to &quot;正则表达式的零宽断言&quot;">​</a></h2><ul><li>(?=exp) 匹配exp前面的位置</li><li>(?&lt;=exp) 匹配exp后面的位置</li><li>(?!exp) 匹配后面跟的不是exp的位置</li><li>(?&lt;!exp) 匹配前面不是exp的位置</li><li>(?#comment) 注释，忽略括号内的内容</li></ul><h2 id="正则表达式的负向零宽断言" tabindex="-1">正则表达式的负向零宽断言 <a class="header-anchor" href="#正则表达式的负向零宽断言" aria-label="Permalink to &quot;正则表达式的负向零宽断言&quot;">​</a></h2><ul><li>(?&lt;!exp) 匹配前面不是exp的位置</li><li>(?!exp) 匹配后面跟的不是exp的位置</li></ul><h2 id="正则表达式的注释" tabindex="-1">正则表达式的注释 <a class="header-anchor" href="#正则表达式的注释" aria-label="Permalink to &quot;正则表达式的注释&quot;">​</a></h2><ul><li>(?#comment) 注释，忽略括号内的内容</li></ul><h2 id="正则表达式的运算符优先级" tabindex="-1">正则表达式的运算符优先级 <a class="header-anchor" href="#正则表达式的运算符优先级" aria-label="Permalink to &quot;正则表达式的运算符优先级&quot;">​</a></h2><ul><li>\\ 转义符</li><li>(), ( ?: ), (?=), [] 圆括号和方括号</li><li>*, +, ?, {n}, {n,}, {n,m} 限定符</li><li>^, $, \\任何元字符、任何字符 定位点和序列（即：位置和顺序）</li><li>| 替换，&quot;或&quot;操作</li></ul><h2 id="正则表达式的模式修正符" tabindex="-1">正则表达式的模式修正符 <a class="header-anchor" href="#正则表达式的模式修正符" aria-label="Permalink to &quot;正则表达式的模式修正符&quot;">​</a></h2><ul><li>i 修饰符用于执行对大小写不敏感的匹配。</li><li>g 修饰符用于执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</li><li>m 修饰符用于执行多行匹配。</li></ul><h2 id="re模块" tabindex="-1">re模块 <a class="header-anchor" href="#re模块" aria-label="Permalink to &quot;re模块&quot;">​</a></h2><p>Python提供re模块，包含所有正则表达式的功能。由于Python的字符串本身也用\\转义，所以要特别注意：</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">s </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ABC</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">-001</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># Python的字符串</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 对应的正则表达式字符串变成：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># &#39;ABC\\-001&#39;</span></span></code></pre></div><p>因此我们强烈建议使用Python的r前缀，就不用考虑转义的问题了：</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">s </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">r</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ABC</span><span style="color:#A6ACCD;">\\-</span><span style="color:#C3E88D;">001</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># Python的字符串</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 对应的正则表达式字符串不变：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># &#39;ABC\\-001&#39;</span></span></code></pre></div><p>先看看如何判断正则表达式是否匹配：</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> re</span></span>
<span class="line"><span style="color:#A6ACCD;">re</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">r</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">^\\d</span><span style="color:#89DDFF;">{3}</span><span style="color:#A6ACCD;">\\-</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">{3,8}</span><span style="color:#C3E88D;">$</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">010-12345</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>上面的代码表示：</p><ul><li>创建一个正则表达式对象</li><li>用该正则表达式去匹配字符串</li><li>如果匹配成功，返回一个Match对象，否则返回None。 所以我们用变量m来保存匹配的结果：</li></ul><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> re</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> m </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> re</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">r</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">^</span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">{3})</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">{3,8})</span><span style="color:#C3E88D;">$</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">010-12345</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> m</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">_sre</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">SRE_Match</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#A6ACCD;">; span</span><span style="color:#89DDFF;">=(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> match</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">010-12345</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> m</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">group</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">&#39;</span><span style="color:#676E95;font-style:italic;">010-12345</span><span style="color:#89DDFF;font-style:italic;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> m</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">group</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">&#39;</span><span style="color:#676E95;font-style:italic;">010</span><span style="color:#89DDFF;font-style:italic;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> m</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">group</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">&#39;</span><span style="color:#676E95;font-style:italic;">12345</span><span style="color:#89DDFF;font-style:italic;">&#39;</span></span></code></pre></div><p>如果正则表达式中定义了组，就可以在Match对象上用group()方法提取出子串来。 注意到group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串。 提取子串非常有用。来看一个更凶残的例子：</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> t </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">19:05:30</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> m </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> re</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">r</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">^</span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">[</span><span style="color:#C3E88D;">0-9</span><span style="color:#89DDFF;">]|</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">[</span><span style="color:#C3E88D;">0-9</span><span style="color:#89DDFF;">]|</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">[</span><span style="color:#C3E88D;">0-3</span><span style="color:#89DDFF;">]|[</span><span style="color:#C3E88D;">0-9</span><span style="color:#89DDFF;">])</span><span style="color:#A6ACCD;">\\:</span><span style="color:#89DDFF;">([</span><span style="color:#C3E88D;">0-5</span><span style="color:#89DDFF;">][</span><span style="color:#C3E88D;">0-9</span><span style="color:#89DDFF;">])</span><span style="color:#A6ACCD;">\\:</span><span style="color:#89DDFF;">([</span><span style="color:#C3E88D;">0-5</span><span style="color:#89DDFF;">][</span><span style="color:#C3E88D;">0-9</span><span style="color:#89DDFF;">])</span><span style="color:#C3E88D;">$</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> t</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> m</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">groups</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">19</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">05</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">30</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span></code></pre></div>`,57),e=[p];function t(r,i,c,D,y,F){return l(),a("div",null,e)}const u=s(o,[["render",t]]);export{h as __pageData,u as default};
