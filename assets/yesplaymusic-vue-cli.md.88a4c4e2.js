import{_ as s,o as a,c as e,V as o}from"./chunks/framework.7d8927c2.js";const d=JSON.parse('{"title":"YesPlayMusic-vue/cli","description":"音乐播放器","frontmatter":{"title":"YesPlayMusic-vue/cli","description":"音乐播放器","date":"2023-10-09T00:00:00.000Z","tags":["项目和工具"]},"headers":[],"relativePath":"yesplaymusic-vue-cli.md","filePath":"yesplaymusic-vue-cli.md","lastUpdated":1705687892000}'),l={name:"yesplaymusic-vue-cli.md"},n=o(`<blockquote><p>选择对应的构建工具</p></blockquote><h2 id="vue-cli-service-4-5-13" tabindex="-1">vue/cli-service 4.5.13 <a class="header-anchor" href="#vue-cli-service-4-5-13" aria-label="Permalink to &quot;vue/cli-service 4.5.13&quot;">​</a></h2><p>webpack版本是：4.0.0 选择vue2、vuex、vue-router，没有选prettier、eslint的原因是总是报muti-word的错误。</p><h2 id="全局组件-以及获取文件夹下的所有icon文件" tabindex="-1">全局组件，以及获取文件夹下的所有icon文件 <a class="header-anchor" href="#全局组件-以及获取文件夹下的所有icon文件" aria-label="Permalink to &quot;全局组件，以及获取文件夹下的所有icon文件&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">component</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">svg-icon</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> SvgIcon)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> requireAll </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">requireContext</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> requireContext</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(requireContext)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> req </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> require</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">context</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">svg</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">requireAll</span><span style="color:#A6ACCD;">(req)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="vue-router" tabindex="-1">vue-router <a class="header-anchor" href="#vue-router" aria-label="Permalink to &quot;vue-router&quot;">​</a></h2><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">router-link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">to</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">router-link</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">router-view</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">router-view</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="ref实现访问子组件的方法" tabindex="-1">ref实现访问子组件的方法 <a class="header-anchor" href="#ref实现访问子组件的方法" aria-label="Permalink to &quot;ref实现访问子组件的方法&quot;">​</a></h2><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ContextMenu</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">userProfileMenu</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//访问方法</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$refs</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">userProfileMenu</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">openMenu</span><span style="color:#A6ACCD;">(e)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="slot" tabindex="-1">slot <a class="header-anchor" href="#slot" aria-label="Permalink to &quot;slot&quot;">​</a></h2><p>父组件给子组件传递内容</p><h2 id="focus和-blur" tabindex="-1">@focus和@blur <a class="header-anchor" href="#focus和-blur" aria-label="Permalink to &quot;@focus和@blur&quot;">​</a></h2><h2 id="const-cookies-string-split" tabindex="-1">const cookies = string.split(&#39;;;&#39;); <a class="header-anchor" href="#const-cookies-string-split" aria-label="Permalink to &quot;const cookies = string.split(&#39;;;&#39;);&quot;">​</a></h2><p>将字符串按照;;分隔符划分，返回一个数组。<br> 例如，如果 string 的值为 &#39;name=John;;age=30;;gender=male&#39;，则执行 string.split(&#39;;;&#39;) 后，返回的数组为 [&#39;name=John&#39;, &#39;age=30&#39;, &#39;gender=male&#39;]。</p><h2 id="state-data-user-userid" tabindex="-1">state.data.user?.userId <a class="header-anchor" href="#state-data-user-userid" aria-label="Permalink to &quot;state.data.user?.userId&quot;">​</a></h2><p>这行代码是一个 JavaScript 的可选链语法，用于访问嵌套对象的属性。使用了可选链语法 ?. 来访问嵌套对象的属性。这种语法可以避免在访问嵌套对象属性时出现 TypeError 错误，即使某个属性不存在也不会抛出异常。如果属性不存在，则返回 undefined。在这个例子中，如果 state.data.user 或 state.data.user.userId 不存在，则返回 undefined。如果存在，则返回 state.data.user.userId 的值。</p><h2 id="cookies-get-key-localstorage-getitem-cookie-key" tabindex="-1">Cookies.get(key) ?? localStorage.getItem(<code>cookie-\${key}</code>); <a class="header-anchor" href="#cookies-get-key-localstorage-getitem-cookie-key" aria-label="Permalink to &quot;Cookies.get(key) ?? localStorage.getItem(\`cookie-\${key}\`);&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Cookies </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">js-cookie</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">Cookies</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(key) </span><span style="color:#89DDFF;">??</span><span style="color:#A6ACCD;"> localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getItem</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">cookie-</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">}\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>??是逻辑空值合并运算符，在这个例子中，Cookies.get(key) 是一个函数调用，用于获取名为 key 的 cookie 值。如果该 cookie 值不存在，则返回 undefined。如果 Cookies.get(key) 返回 undefined，则逻辑空值合并运算符 ?? 会继续查找 localStorage 中名为 cookie-\${key} 的值。如果该值存在，则返回该值；否则，返回 undefined。<br> 需要注意的是，逻辑空值合并运算符 ?? 是 ES2020 中的新特性，需要在支持该语法的 JavaScript 运行环境中使用，例如最新版本的 Chrome、Firefox、Edge 等浏览器，或者 Node.js 14.0.0 及以上版本。如果在不支持该语法的运行环境中使用，会导致语法错误。 ?? Module parse failed: Unexpected token (12:27) webpack编译器报错</p>`,19),t=[n];function p(r,c,i,y,D,F){return a(),e("div",null,t)}const C=s(l,[["render",p]]);export{d as __pageData,C as default};
